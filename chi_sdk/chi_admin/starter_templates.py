"""Starter templates for CHI TUI scaffolding."""

CONFIG_YAML = 'app_bin: {binary_name}\nextra_env:\n  CHI_TUI_JSON: "1"\n'

README_TEMPLATE = """# CHI TUI Integration

This directory was generated by `chi-admin init`.

## Run with prebuilt TUI

If you installed chi-sdk (`pip install chi-sdk`), run:

    CHI_APP_BIN={binary_name} chi-tui

## Wrapper scripts

Generated under `.tui/bin/`:

- POSIX: .tui/bin/{binary_name}-ui
- Windows: .tui/bin/{binary_name}-ui.bat

They set `CHI_APP_BIN` and `CHI_TUI_JSON=1` and then run `chi-tui`.

### PATH options

- POSIX: add `.tui/bin` to PATH: `export PATH="$PWD/.tui/bin:$PATH"`
- POSIX (symlink): `ln -s "$PWD/.tui/bin/{binary_name}-ui" ~/.local/bin/{binary_name}-ui`
- Windows: call `.tui\\bin\\{binary_name}-ui.bat` directly or add it to PATH

## Validate setup

Run diagnostic checks:

    chi-admin doctor

For JSON output:

    CHI_TUI_JSON=1 chi-admin doctor

## Default nav config

This folder supports a default entry file at `.tui/chi-index.yaml`.
If present, the TUI will pick it up automatically (or set CHI_TUI_CONFIG_DIR).

"""

POSIX_WRAPPER_SCRIPT = """#!/usr/bin/env sh
set -e
CHI_APP_BIN="{binary_name}" CHI_TUI_JSON=1 exec chi-tui "$@"
"""

WINDOWS_WRAPPER_SCRIPT = (
    "@echo off\r\nset CHI_APP_BIN={binary_name}\r\nset CHI_TUI_JSON=1\r\nchi-tui %*\r\n"
)

CHI_INDEX_YAML = """# CHI TUI Configuration for {binary_name}
# Generated by: chi-admin init
# Docs: https://github.com/contextops/chi_sdk

# Header shown at the top of the TUI
header: "{header_title}"

# Main menu structure
menu:
  # Simple command example
  - id: "hello"
    title: "Hello World"
    # Uncomment if your CLI has a 'hello' command:
    # cmd: "${{APP_BIN}} hello --name TUI"
    
  # List/table view example  
  - id: "list"
    title: "List Items"
    # Uncomment and adjust to your list command:
    # cmd: "${{APP_BIN}} list-items"
    
  # Panel layout example (split view)
  - id: "panel_demo"
    title: "Split View Demo"
    widget: "panel"
    panel_layout: "horizontal"  # or "vertical"
    panel_size: "1:1"           # ratio like "2:1" or "1:2"
    pane_b_yaml: "panel_b.yaml" # right/bottom pane config
    
  # Nested menu example
  - id: "advanced"
    title: "Advanced Options"
    children:
      - id: "settings"
        title: "Settings"
        # cmd: "${{APP_BIN}} settings"
      - id: "about"
        title: "About"
        # cmd: "${{APP_BIN}} --version"

# Keyboard shortcuts (optional)
# shortcuts:
#   - key: "q"
#     action: "quit"
#   - key: "r" 
#     action: "refresh"
"""

PANEL_B_YAML = """# Right/Bottom pane configuration for split view
# Used by items with widget: "panel" and pane_b_yaml reference

type: json_viewer  # or "menu" for nested navigation

# Command to execute for this pane
# ${{APP_BIN}} will be replaced with: {binary_name}
cmd: "${{APP_BIN}} --json schema"  # Shows your CLI's schema

# Alternative: show a specific command output
# cmd: "${{APP_BIN}} list-items"

# For menu type, define items:
# type: menu
# items:
#   - id: "item1"
#     title: "First Item"
#     cmd: "${{APP_BIN}} get-item --id 1"
"""

STYLES_YAML = """# Visual styling configuration (optional)
# Customize colors and appearance of your TUI

# Color palette (using terminal color names or hex codes)
colors:
  primary: "cyan"
  secondary: "magenta"
  success: "green"
  warning: "yellow"
  error: "red"
  
# Component styles
header:
  fg: "white"
  bg: "blue"
  bold: true
  
menu:
  selected:
    fg: "black"
    bg: "cyan"
  normal:
    fg: "white"
    bg: "default"
    
# Border styles: "plain", "rounded", "double", "thick"
borders: "rounded"

# Layout preferences
layout:
  margin: 1
  padding: 1
"""
